Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

Example:

Input: nums = [-2,0,1,3], and target = 2
Output: 2 
Explanation: Because there are two triplets which sums are less than 2:
             [-2,0,1]
             [-2,0,3]
Follow up: Could you solve it in O(n2) runtime?

    public int threeSumSmaller(int[] nums, int target) {
        int count = 0 ;
        Arrays.sort(nums);
        for(int i = 0 ; i < nums.length -2 ; i++){
            for(int j = i+1,k=nums.length-1; j<k;){
                if(nums[i]+nums[j]+nums[k]<target){
                    count+=k-j;
                    j++;
                }
                else{
                    k--;
                }
                
            }
        }
        return count;
    }