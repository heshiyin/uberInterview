36. Valid Sudoku
public boolean isValidSudoku(char[][] board) {
        // Start typing your Java solution below
        // DO NOT write main() function
        for(int i = 0 ; i < 9 ;i++){
            for(int j = 0 ; j<9 ; j++){
                if(board[i][j] !='.' &&!isValid(board,i,j))
                return false;
            }
        }
        return true;
    }
    public boolean isValid(char[][] board,int i, int j){
        for(int coloum = 0 ; coloum < 9 ; coloum++){
            if(coloum!= j && board[i][j] == board[i][coloum])
            return false;
        }
         for(int row = 0 ; row < 9 ; row++){
            if(row != i && board[row][j] == board[i][j])
            return false;
        }
        for (int row = (i / 3) * 3; row < (i / 3) * 3 + 3; row++){
            for (int col = (j / 3) * 3; col < (j / 3) * 3 + 3; col++){
                if(col!=j&&row!=i&&board[row][col] == board[i][j])
                return false;
            }
        }
        return true;
    }


    ==========================================
    public void solveSudoku(char[][] board) {
        if(board == null || board.length == 0)
            return;
        solve(board);
    }
    
    public boolean solve(char[][] board){
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(board[i][j] == '.'){
                    for(char c = '1'; c <= '9'; c++){//trial. Try 1 through 9
                        if(isValid(board, i, j, c)){
                            board[i][j] = c; //Put c for this cell
                            
                            if(solve(board))
                                return true; //If it's the solution return true
                            else
                                board[i][j] = '.'; //Otherwise go back
                        }
                    }
                    
                    return false;
                }
            }
        }
        return true;
    }
    
    private boolean isValid(char[][] board, int row, int col, char c){
        for(int i = 0; i < 9; i++) {
            if(board[i][col] != '.' && board[i][col] == c) return false; //check row
            if(board[row][i] != '.' && board[row][i] == c) return false; //check column
            if(board[3 * (row / 3) + i / 3][ 3 * (col / 3) + i % 3] != '.' && 
board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c) return false; //check 3*3 block
        }
        return true;
    }