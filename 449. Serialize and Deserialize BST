Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.

public static String none = "X";
    public static String spliter= ",";
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
       StringBuilder sb = new StringBuilder();
        
        buildString(root,sb);
        return sb.toString();
    }
    
    public void buildString(TreeNode root, StringBuilder sb){
       if(root==null) {
           sb.append(none).append(spliter);
       }else{
           sb.append(root.val).append(spliter);
           buildString(root.left,sb);
           buildString(root.right,sb);
       }
        
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
       Deque<String> nodes = new LinkedList<>(Arrays.asList(data.split(spliter)));
       return buildTree(nodes); 
    }
    
    public TreeNode buildTree(Deque<String> nodes){
        String val = nodes.remove();
        if(val.equals(none)){
            return null;
        }
        else{
            TreeNode root = new TreeNode(Integer.valueOf(val));
            root.left= buildTree(nodes);
            root.right= buildTree(nodes);
            return root;
        }
        
    }


 =============================================================
queue , iterative 写法

 public static String none = "X";
    public static String spliter= ",";
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
       StringBuilder sb = new StringBuilder();
        
        buildString(root,sb);
        return sb.toString();
    }
    
    public void buildString(TreeNode root, StringBuilder sb){
       if(root==null) {
           sb.append(none).append(spliter);
       }else{
           sb.append(root.val).append(spliter);
           buildString(root.left,sb);
           buildString(root.right,sb);
       }
        
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
       Deque<String> nodes = new LinkedList<>(Arrays.asList(data.split(spliter)));
       return buildTree(nodes); 
    }
    
    public TreeNode buildTree(Deque<String> nodes){
        String val = nodes.remove();
        if(val.equals(none)){
            return null;
        }
        else{
            TreeNode root = new TreeNode(Integer.valueOf(val));
            root.left= buildTree(nodes);
            root.right= buildTree(nodes);
            return root;
        }
        
    }