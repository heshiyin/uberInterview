636. Exclusive Time of Functions
Input:
n = 2
logs = 
["0:start:0",
 "1:start:2",
 "1:end:5",
 "0:end:6"]
Output:[3, 4]
Explanation:
Function 0 starts at time 0, then it executes 2 units of time and reaches the end of time 1. 
Now function 0 calls function 1, function 1 starts at time 2, executes 4 units of time and end at time 5.
Function 0 is running again at time 6, and also end at the time 6, thus executes 1 unit of time. 
So function 0 totally execute 2 + 1 = 3 units of time, and function 1 totally execute 4 units of time.

public int[] exclusiveTime(int n, List<String> logs) {
        int[] res = new int[n];
        Stack<Integer> stack = new Stack<>();
        int prevTime = 0;
        for(String log :logs){
            String[] time= log.split(":");
            if(!stack.isEmpty()){
                res[stack.peek()]+=  Integer.parseInt(time[2]) - prevTime;
            }
            prevTime = Integer.valueOf(time[2]);
            if(time[1].equals("start")){
                stack.push(Integer.valueOf(time[0]));
            }else{
                res[stack.pop()]++;
                prevTime++;
            }
        }
        return res;
    }