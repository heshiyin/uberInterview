Find min difference in array
不要求连续，找出最小的difference

https://www.geeksforgeeks.org/partition-a-set-into-two-subsets-such-that-the-difference-of-subset-sums-is-minimum/
static int findMin(int arr[], int n)
    {
        // Calculate sum of all elements
        int sum = 0; 
        for (int i = 0; i < n; i++)
            sum += arr[i];
     
        // Create an array to store 
        // results of subproblems
        boolean dp[][] = new boolean[n + 1][sum + 1];
     
        // Initialize first column as true. 
        // 0 sum is possible  with all elements.
        for (int i = 0; i <= n; i++)
            dp[i][0] = true;
     
        // Initialize top row, except dp[0][0], 
        // as false. With 0 elements, no other 
        // sum except 0 is possible
        for (int i = 1; i <= sum; i++)
            dp[0][i] = false;
     
        // Fill the partition table 
        // in bottom up manner
        for (int i = 1; i <= n; i++)
        {
            for (int j = 1; j <= sum; j++)
            {
                // If i'th element is excluded
                dp[i][j] = dp[i - 1][j];
     
                // If i'th element is included
                if (arr[i - 1] <= j)
                    dp[i][j] |= dp[i - 1][j - arr[i - 1]];
            }
        }
     
        // Initialize difference of two sums. 
        int diff = Integer.MAX_VALUE;
         
        // Find the largest j such that dp[n][j]
        // is true where j loops from sum/2 t0 0
        for (int j = sum / 2; j >= 0; j--)
        {
            // Find the 
            if (dp[n][j] == true)
            {
                diff = sum - 2 * j;
                break;
            }
        }
        return diff;
    }

import java.util.*;

public class PartitionMinDifferenceSubsetSum {

  public static void main(String[] args) {
    int[] input1 = {1, 5, 5, 11};
    System.out.println("1, 5, 5, 11 : " + minDifference(input1));
    int[] input2 = {3, 1, 4, 2, 2, 1};
    System.out.println("3, 1, 4, 2, 2, 1 : " + minDifference(input2));
  }

  private static int minDifference(int[] nums) {
    if (nums == null || nums.length == 0) {
      return 0;
    }
    int sum = 0;
    for (int num : nums) {
      sum += num;
    }
    return minDifference(nums, 0, 0, sum);
  }

  private static int minDifference(int[] nums, int index, int curSum, int sum) {
    if (index == nums.length) {
      return Math.abs(curSum - (sum - curSum));
    }
    return Math.min(minDifference(nums, index + 1, curSum, sum),
                    minDifference(nums, index + 1, curSum + nums[index], sum));
  }
}

416. Partition Equal Subset Sum

public boolean canPartition(int[] nums) {
        int sum = 0;
        for(int num:nums){
            sum+=num;
        }
        if(sum%2!=0)return false;
        Arrays.sort(nums);
        return dfs(nums,sum/2,new int[nums.length],0);
    }
    boolean dfs(int[]nums, int target, int[] visited,int index){
        if(target<0) return false;
        if(target==0) return true;
        for(int i = index;i<nums.length ; i++){
            if (i > index && nums[i] == nums[i-1]) {
                    continue;
            }
            if(visited[i]==0){
                visited[i]=1;
                if(dfs(nums,target-nums[i],visited,index+1)){
                    return true;
                }
                visited[i]=0;
            }
        }
        return false;
    }